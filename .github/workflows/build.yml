name: Build
on:
  push:
    branches:
      - main
    tags:
      - '**'

  pull_request:
    branches:
      - '**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install PNPM
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install

      - name: Prettier
        run: pnpm prettier:check

      - name: Install GTK
        run: sudo apt-get update && sudo apt-get install libgtk-3-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev

      - name: Clippy
        run: cargo clippy --workspace --all-features --all-targets

      - name: Test
        run: cargo test --workspace --all-features

      - name: Unused dependencies
        run: |
          cargo install cargo-machete --locked
          cargo machete --skip-target-dir

      - name: Fmt
        run: cargo fmt --all -- --files-with-diff --check

  build:
    name: ${{ matrix.platform_name }}
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-15'
            platform_name: MacOS
            build: 'pnpm tauri build --target universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            platform_name: Linux (x64)
            build: 'pnpm tauri build'
          - platform: 'linux-arm64'
            platform_name: Linux (ARM)
            build: 'pnpm tauri build --target aarch64-unknown-linux-gnu'
          - platform: 'windows-latest'
            platform_name: Windows (x64)
            build: 'pnpm tauri build'
          - platform: 'windows-latest'
            platform_name: Windows (ARM)
            build: 'pnpm tauri build --target aarch64-pc-windows-msvc'
          - platform: 'macos-15'
            platform_name: iOS
            build: 'pnpm tauri ios build --export-method app-store-connect'
            build_dev: 'pnpm tauri ios build --export-method debugging'
          - platform: 'macos-15'
            platform_name: Android
            build: 'pnpm tauri android build'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add x86_64-apple-darwin
        if: matrix.platform_name == 'MacOS'
        run: rustup target add x86_64-apple-darwin

      - name: Add aarch64-apple-ios
        if: matrix.platform_name == 'iOS'
        run: rustup target add aarch64-apple-ios

      - name: Add aarch64-pc-windows-msvc
        if: matrix.platform_name == 'Windows (ARM)'
        run: rustup target add aarch64-pc-windows-msvc

      - name: Add aarch64-unknown-linux-gnu
        if: matrix.platform_name == 'Linux (ARM)'
        run: rustup target add aarch64-unknown-linux-gnu

      - name: Add Android targets
        if: matrix.platform_name == 'Android'
        run: rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android

      - name: Ubuntu dependencies
        if: matrix.platform == 'ubuntu-22.04' || matrix.platform == 'linux-arm64'
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev

      - name: Ubuntu ARM dependencies
        if: matrix.platform == 'linux-arm64'
        run: sudo apt-get install --reinstall xdg-utils

      - name: Windows dependencies
        if: matrix.platform == 'windows-latest'
        run: |
          choco install nasm
          echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        if: matrix.platform_name == 'Android'
        with:
          ndk-version: r26d
          link-to-sdk: true
          add-to-path: true

      - name: Add NDK toolchain to path
        if: matrix.platform_name == 'Android'
        run: echo "$ANDROID_NDK/toolchains/llvm/prebuilt/darwin-x86_64/bin" >> $GITHUB_PATH
        env:
          ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Setup Android signing
        if: matrix.platform_name == 'Android'
        run: |
          cd src-tauri/gen/android
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
          echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
          echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Frontend dependencies
        run: pnpm install

      - name: Save API key to file
        if: matrix.platform == 'macos-15'
        run: |
          mkdir -p ~/private_keys
          echo -n '${{ secrets.APPLE_API_SECRET_KEY }}' > ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8

      - name: Setup Xcode
        if: matrix.platform_name == 'iOS'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Download iOS platform
        if: matrix.platform_name == 'iOS'
        run: |
          xcodebuild -version
          xcodebuild -downloadPlatform iOS

      - name: Bindgen CLI
        run: cargo install bindgen-cli --locked

      # On MacOS we only notarize on tagged releases
      # On iOS we need these secrets as well to do code signing
      - name: Build with secrets
        if: ${{ (matrix.platform_name == 'MacOS' && startsWith(github.event.ref, 'refs/tags/v')) || matrix.platform_name == 'iOS' }}
        run: ${{ startsWith(github.event.ref, 'refs/tags/v') && matrix.build || matrix.build_dev || matrix.build }}
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_PATH: ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
          CI: true

      # On Android we need to use the NDK environment variables.
      - name: Build with NDK
        if: matrix.platform_name == 'Android'
        run: ${{ matrix.build }}
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
          NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          CI: true

      # We don't currently do signing on other platforms
      - name: Build without secrets
        if: ${{ !((matrix.platform_name == 'MacOS' && startsWith(github.event.ref, 'refs/tags/v')) || matrix.platform_name == 'iOS' || matrix.platform_name == 'Android') }}
        run: ${{ matrix.build }}
        env:
          CI: true

      # MacOS
      - name: Upload APP (MacOS)
        uses: actions/upload-artifact@v4
        if: matrix.platform_name == 'MacOS'
        with:
          name: Sage.app
          path: target/universal-apple-darwin/release/bundle/macos/*.app

      - name: Upload DMG (MacOS)
        uses: actions/upload-artifact@v4
        if: matrix.platform_name == 'MacOS'
        with:
          name: Sage.dmg
          path: target/universal-apple-darwin/release/bundle/dmg/*.dmg

      - name: Release (MacOS)
        uses: softprops/action-gh-release@v2
        if: matrix.platform_name == 'MacOS' && startsWith(github.event.ref, 'refs/tags/v')
        with:
          files: |
            target/universal-apple-darwin/release/bundle/macos/*.app
            target/universal-apple-darwin/release/bundle/dmg/*.dmg

      # Linux x64
      - name: Upload DEB (Linux x64)
        uses: actions/upload-artifact@v4
        if: matrix.platform_name == 'Linux (x64)'
        with:
          name: Sage_x64.deb
          path: target/release/bundle/deb/*.deb

      - name: Upload DMG (Linux x64)
        uses: actions/upload-artifact@v4
        if: matrix.platform_name == 'Linux (x64)'
        with:
          name: Sage_x64.rpm
          path: target/release/bundle/rpm/*.rpm

      - name: Upload AppImage (Linux x64)
        uses: actions/upload-artifact@v4
        if: matrix.platform_name == 'Linux (x64)'
        with:
          name: Sage_x64.AppImage
          path: target/release/bundle/appimage/*.AppImage

      - name: Release (Linux x64)
        uses: softprops/action-gh-release@v2
        if: matrix.platform_name == 'Linux (x64)' && startsWith(github.event.ref, 'refs/tags/v')
        with:
          files: |
            target/release/bundle/deb/*.deb
            target/release/bundle/rpm/*.rpm
            target/release/bundle/appimage/*.AppImage

      # Linux ARM
      - name: Upload DEB (Linux ARM)
        uses: actions/upload-artifact@v4
        if: matrix.platform_name == 'Linux (ARM)'
        with:
          name: Sage_ARM64.deb
          path: target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb

      - name: Upload DMG (Linux ARM)
        uses: actions/upload-artifact@v4
        if: matrix.platform_name == 'Linux (ARM)'
        with:
          name: Sage_ARM64.rpm
          path: target/aarch64-unknown-linux-gnu/release/bundle/rpm/*.rpm

      - name: Upload AppImage (Linux ARM)
        uses: actions/upload-artifact@v4
        if: matrix.platform_name == 'Linux (ARM)'
        with:
          name: Sage_ARM64.AppImage
          path: target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage

      - name: Release (Linux ARM)
        uses: softprops/action-gh-release@v2
        if: matrix.platform_name == 'Linux (ARM)' && startsWith(github.event.ref, 'refs/tags/v')
        with:
          files: |
            target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb
            target/aarch64-unknown-linux-gnu/release/bundle/rpm/*.rpm
            target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage

      # Windows x64
      - name: Upload MSI (Windows x64)
        uses: actions/upload-artifact@v4
        if: matrix.platform_name == 'Windows (x64)'
        with:
          name: Sage_x64.msi
          path: target/release/bundle/msi/*.msi

      - name: Upload EXE (Windows x64)
        uses: actions/upload-artifact@v4
        if: matrix.platform_name == 'Windows (x64)'
        with:
          name: Sage_x64.exe
          path: target/release/bundle/nsis/*.exe

      - name: Release (Windows x64)
        uses: softprops/action-gh-release@v2
        if: matrix.platform_name == 'Windows (x64)' && startsWith(github.event.ref, 'refs/tags/v')
        with:
          files: |
            target/release/bundle/msi/*.msi
            target/release/bundle/nsis/*.exe

      # Windows ARM
      - name: Upload MSI (Windows ARM)
        uses: actions/upload-artifact@v4
        if: matrix.platform_name == 'Windows (ARM)'
        with:
          name: Sage_ARM64.msi
          path: target/aarch64-pc-windows-msvc/release/bundle/msi/*.msi

      - name: Upload EXE (Windows ARM)
        uses: actions/upload-artifact@v4
        if: matrix.platform_name == 'Windows (ARM)'
        with:
          name: Sage_ARM64.exe
          path: target/aarch64-pc-windows-msvc/release/bundle/nsis/*.exe

      - name: Release (Windows ARM)
        uses: softprops/action-gh-release@v2
        if: matrix.platform_name == 'Windows (ARM)' && startsWith(github.event.ref, 'refs/tags/v')
        with:
          files: |
            target/aarch64-pc-windows-msvc/release/bundle/msi/*.msi
            target/aarch64-pc-windows-msvc/release/bundle/nsis/*.exe

      # iOS
      - name: Upload IPA (iOS)
        uses: actions/upload-artifact@v4
        if: matrix.platform_name == 'iOS'
        with:
          name: Sage_iOS.ipa
          path: src-tauri/gen/apple/build/arm64/*.ipa

      - name: Release (iOS)
        uses: softprops/action-gh-release@v2
        if: matrix.platform_name == 'iOS' && startsWith(github.event.ref, 'refs/tags/v')
        with:
          files: |
            src-tauri/gen/apple/build/arm64/*.ipa

      - name: Upload to App Store (or TestFlight)
        if: matrix.platform_name == 'iOS' && startsWith(github.event.ref, 'refs/tags/v')
        run: xcrun altool --upload-app --type ios --file "src-tauri/gen/apple/build/arm64/Sage.ipa" --apiKey $APPLE_API_KEY_ID --apiIssuer $APPLE_API_ISSUER
        env:
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}

      # Android
      - name: Upload AAB (Android)
        uses: actions/upload-artifact@v4
        if: matrix.platform_name == 'Android'
        with:
          name: Sage_Android.aab
          path: src-tauri/gen/android/app/build/outputs/bundle/universalRelease/app-universal-release.aab

      - name: Upload APK (Android)
        uses: actions/upload-artifact@v4
        if: matrix.platform_name == 'Android'
        with:
          name: Sage_Android.apk
          path: src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release.apk

      - name: Release (Android)
        uses: softprops/action-gh-release@v2
        if: matrix.platform_name == 'Android' && startsWith(github.event.ref, 'refs/tags/v')
        with:
          files: |
            src-tauri/gen/android/app/build/outputs/bundle/universalRelease/app-universal-release.aab
            src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release.apk
